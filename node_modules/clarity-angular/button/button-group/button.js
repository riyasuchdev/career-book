/*
 * Copyright (c) 2016 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, ViewChild, Input, SkipSelf, Optional, EventEmitter, Output } from "@angular/core";
import { ButtonInGroupService } from "../providers/buttonInGroup.service";
var Button = (function () {
    function Button(buttonInGroupService) {
        this.buttonInGroupService = buttonInGroupService;
        this._enableService = false;
        this._inMenu = false;
        this._classNames = "btn";
        this._name = null;
        this._type = null;
        this._disabled = null;
        this._click = new EventEmitter(false);
    }
    Object.defineProperty(Button.prototype, "inMenu", {
        get: function () {
            return this._inMenu;
        },
        set: function (value) {
            value = !!value;
            if (this._inMenu !== value) {
                this._inMenu = value;
                //We check if the service flag is enabled
                //and if the service exists because the service is optional
                if (this._enableService && this.buttonInGroupService) {
                    this.buttonInGroupService.updateButtonGroup(this);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "classNames", {
        get: function () {
            return this._classNames;
        },
        set: function (value) {
            if (typeof value === "string") {
                var classNames = value.split(" ");
                if (classNames.indexOf("btn") === -1) {
                    classNames.push("btn");
                }
                this._classNames = classNames.join(" ");
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "name", {
        get: function () {
            return this._name;
        },
        set: function (value) {
            if (typeof value === "string") {
                this._name = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            if (typeof value === "string") {
                this._type = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "disabled", {
        get: function () {
            return this._disabled;
        },
        set: function (value) {
            if (value !== null && value !== false) {
                this._disabled = "";
            }
            else {
                this._disabled = null;
            }
        },
        enumerable: true,
        configurable: true
    });
    Button.prototype.emitClick = function () {
        this._click.emit(true);
    };
    Button.prototype.ngAfterViewInit = function () {
        this._enableService = true;
    };
    return Button;
}());
export { Button };
Button.decorators = [
    { type: Component, args: [{
                selector: "clr-button",
                template: "\n        <ng-template #buttonProjectedRef>\n            <button \n                [class]=\"classNames\" \n                (click)=\"emitClick()\"\n                [attr.type]=\"type\"\n                [attr.name]=\"name\"\n                [attr.disabled]=\"disabled\">\n                <ng-content></ng-content>\n            </button>\n        </ng-template>\n    "
            },] },
];
/** @nocollapse */
Button.ctorParameters = function () { return [
    { type: ButtonInGroupService, decorators: [{ type: SkipSelf }, { type: Optional },] },
]; };
Button.propDecorators = {
    'templateRef': [{ type: ViewChild, args: ["buttonProjectedRef",] },],
    'inMenu': [{ type: Input, args: ["clrInMenu",] },],
    'classNames': [{ type: Input, args: ["class",] },],
    'name': [{ type: Input, args: ["name",] },],
    'type': [{ type: Input, args: ["type",] },],
    'disabled': [{ type: Input, args: ["disabled",] },],
    '_click': [{ type: Output, args: ["click",] },],
};
//# sourceMappingURL=button.js.map