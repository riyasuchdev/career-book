/*
 * Copyright (c) 2016-2017 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Component, ContentChildren, Input, Output, EventEmitter, HostListener } from "@angular/core";
import { Tabs } from "../layout/tabs/tabs";
import { WizardStep } from "./wizard-step";
import { WizardPageDeprecated } from "./wizard-page";
import { ScrollingService } from "../utils/scrolling/scrolling-service";
var nbWizardComponents = 0;
var WizardDeprecated = (function (_super) {
    __extends(WizardDeprecated, _super);
    function WizardDeprecated(_scrollingService) {
        var _this = _super.call(this) || this;
        _this._scrollingService = _scrollingService;
        _this.size = "xl"; // xl is the default size
        // Variable that toggles open/close of the wizard component.
        _this._open = false;
        // Variable that toggles open/close of the wizard component.
        _this.closable = true;
        // EventEmitter which is emitted on open/close of the wizard.
        _this._openChanged = new EventEmitter(false);
        // User can bind his event handler for onCancel of the main content
        _this.onCancel = new EventEmitter(false);
        // Flag to toggle between Next and Finish button
        _this.isLast = false;
        // Flag to hide/show back button
        _this.isFirst = true;
        // The current page
        _this.currentPage = null;
        _this.id = "clr-wizard-" + (nbWizardComponents++);
        return _this;
    }
    //Detect when _open is set to true and set no-scrolling to true
    WizardDeprecated.prototype.ngOnChanges = function (changes) {
        if (changes && changes.hasOwnProperty("_open")) {
            if (changes["_open"].currentValue) {
                this._scrollingService.stopScrolling();
            }
            else {
                this._scrollingService.resumeScrolling();
            }
        }
    };
    WizardDeprecated.prototype.ngAfterContentInit = function () {
        var _this = this;
        // set the tab content's title to match the tab link's title
        this.wizardPageChildren.forEach(function (wizardPage, index) {
            var children = _this.wizardStepChildren.toArray();
            if (children[index] && !wizardPage.hasProjectedTitleContent) {
                wizardPage.title = children[index].title;
            }
        });
        // override superclass' children to setup the proper linked relationship between
        // tabs and contents
        _super.prototype.overrideTabLinkChildren.call(this, this.wizardStepChildren);
        _super.prototype.overrideTabContentChildren.call(this, this.wizardPageChildren);
        // set first step of the wizard as active/current one
        if (this.tabLinks.length > 0) {
            this.selectTab(this.tabLinks[0]);
        }
    };
    Object.defineProperty(WizardDeprecated.prototype, "tabLinks", {
        // returns only tabLinks that are not skipped
        get: function () {
            return this.wizardStepChildren.filter(function (wizardStep) {
                return !wizardStep.isSkipped;
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WizardDeprecated.prototype, "tabContents", {
        // returns only tabContents that are not skipped
        get: function () {
            return this.wizardPageChildren.filter(function (wizardPage) {
                return !wizardPage.isSkipped;
            });
        },
        enumerable: true,
        configurable: true
    });
    // open --
    //
    // This is a public function that can be used to programmatically open the
    // wizard.
    WizardDeprecated.prototype.open = function () {
        this._open = true;
        this._openChanged.emit(true);
    };
    // close --
    //
    // This is a public function that can be used to programmatically close the
    // wizard.
    WizardDeprecated.prototype.close = function () {
        this._open = false;
        this.onCancel.emit(null);
        this._openChanged.emit(false);
    };
    // _close --
    //
    // This is a private function that is called on the click of the close / cancel
    // button and emits the onCancel event of the active tab.
    WizardDeprecated.prototype._close = function (event) {
        this.close();
    };
    // _next --
    //
    // This is a private function that is called on the click of the next
    // button and emits the onCommit event of the active tab.
    WizardDeprecated.prototype._next = function (event) {
        var totalSteps = this.tabLinks.length - 1;
        var i = this.currentTabIndex;
        var page = this.tabContents[i];
        if (!page.nextDisabled) {
            page.onCommit.emit(null);
            if (!page.preventDefault) {
                // If no handler for finish button, then close wizard on click
                // of finish by default
                if (totalSteps === i) {
                    this.close();
                }
                else {
                    this.next();
                }
            }
        }
    };
    // next --
    //
    // When called, after successful validation, the wizard will move to the
    // next page.
    // This is a public function that can be used to programmatically advance
    // the user to the next page.
    WizardDeprecated.prototype.next = function () {
        var i = this.currentTabIndex;
        var totalSteps = this.tabLinks.length - 1;
        var page = this.tabContents[i];
        // Call the onCommit or the Validation function of that step, and if it
        // returns true, continue to the next step.
        if (i < totalSteps && !page.nextDisabled) {
            var wizardStep = this.tabLinks[i];
            var nextStep = this.tabLinks[i + 1];
            wizardStep.isCompleted = true;
            this.selectTab(nextStep);
        }
    };
    // prev --
    //
    // When called, the wizard will move to the prev page.
    // This is a public function that can be used to programmatically go back
    // to the previous step.
    WizardDeprecated.prototype.prev = function () {
        var i = this.currentTabIndex;
        if (i > 0) {
            var wizardStep = this.tabLinks[i];
            var prevStep = this.tabLinks[i - 1];
            wizardStep.isCompleted = false;
            prevStep.isCompleted = false;
            this.selectTab(prevStep);
        }
    };
    // selectTab --
    //
    // Base class function overridden to call the onLoad event emitter
    WizardDeprecated.prototype.selectTab = function (wizardNav) {
        _super.prototype.selectTab.call(this, wizardNav);
        var page = this.currentTabContent;
        this.currentPage = page;
        page.onLoad.emit(false);
        // Toggles next and finish button
        var totalSteps = this.tabLinks.length - 1;
        this.isLast = this.currentTabIndex === totalSteps;
        this.isFirst = this.currentTabIndex === 0;
    };
    // skipTab --
    //
    // Public function to skip a Tab given its uniqueId
    WizardDeprecated.prototype.skipTab = function (tabId) {
        this._setTabIsSkipped(tabId, true);
    };
    // unSkipTab --
    //
    // Public function to unSkip a tab given its uniqueId
    WizardDeprecated.prototype.unSkipTab = function (tabId) {
        this._setTabIsSkipped(tabId, false);
    };
    WizardDeprecated.prototype._setTabIsSkipped = function (tabId, isSkipped) {
        var _this = this;
        this.wizardStepChildren.forEach(function (wizardStep, index) {
            if (wizardStep.id === tabId) {
                wizardStep.isSkipped = isSkipped;
                // set the isSkipped property of the matching content if it exists
                if (index < _this.wizardPageChildren.length) {
                    var children = _this.wizardPageChildren.toArray();
                    children[index].isSkipped = isSkipped;
                }
            }
        });
    };
    return WizardDeprecated;
}(Tabs));
export { WizardDeprecated };
WizardDeprecated.decorators = [
    { type: Component, args: [{
                selector: "clr-wizard-deprecated",
                viewProviders: [ScrollingService],
                template: "\n      <!--\n        ~ Copyright (c) 2016-2017 VMware, Inc. All Rights Reserved.\n        ~ This software is released under MIT license.\n        ~ The full license information can be found in LICENSE in the root directory of this project.\n        -->\n\n      <clr-modal\n            [clrModalOpen]=\"_open\"\n            [clrModalSize]=\"size\"\n            [clrModalClosable]=\"closable\"\n            [clrModalStaticBackdrop]=\"true\"\n            (clrModalOpenChange)=\"close()\">\n\n         <div class=\"modal-body\">\n            <div class=\"content-container\">\n               <main class=\"content-area\">\n                  <ng-content></ng-content>\n               </main>\n\n               <nav class=\"nav-panel sidenav\">\n                  <div class=\"text-light\">\n                     <ng-content select=\".wizard-title\"></ng-content>\n                  </div>\n\n                  <ol class=\"nav navList\" role=\"tablist\">\n                     <ng-content select=\"clr-wizard-step\"></ng-content>\n                  </ol>\n               </nav>\n            </div>\n         </div>\n\n         <div class=\"modal-footer\">\n            <button class=\"btn btn-link\" (click)=\"_close($event)\">Cancel</button>\n            <button class=\"btn btn-outline\"\n                  *ngIf=\"!isFirst\" (click)=\"prev($event)\">Back</button>\n            <button class=\"btn btn-primary\"\n                  [class.disabled]=\"currentPage?.nextDisabled\"\n                  (click)=\"_next($event)\">{{isLast? 'Finish' : 'Next'}}</button>\n         </div>\n\n      </clr-modal>\n    ",
                host: {
                    "[class.clr-wizard-old]": "true",
                    "[class.main-container]": "true",
                    "[class.wizard-md]": "size == 'md'",
                    "[class.wizard-lg]": "size == 'lg'",
                    "[class.wizard-lx]": "size == 'lx'"
                }
            },] },
];
/** @nocollapse */
WizardDeprecated.ctorParameters = function () { return [
    { type: ScrollingService, },
]; };
WizardDeprecated.propDecorators = {
    'wizardStepChildren': [{ type: ContentChildren, args: [WizardStep,] },],
    'wizardPageChildren': [{ type: ContentChildren, args: [WizardPageDeprecated,] },],
    'size': [{ type: Input, args: ["clrWizardSize",] },],
    '_open': [{ type: Input, args: ["clrWizardOpen",] },],
    'closable': [{ type: Input, args: ["clrWizardClosable",] },],
    '_openChanged': [{ type: Output, args: ["clrWizardOpenChanged",] },],
    'onCancel': [{ type: Output, args: ["clrWizardOnCancel",] },],
    '_close': [{ type: HostListener, args: ["body:keyup.escape",] },],
};
//# sourceMappingURL=wizard.js.map