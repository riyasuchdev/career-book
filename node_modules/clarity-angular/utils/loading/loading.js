/*
 * Copyright (c) 2016 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Directive, Input, Optional } from "@angular/core";
import { LoadingListener } from "./loading-listener";
var Loading = (function () {
    // We find the first parent that handles something loading
    function Loading(listener) {
        this.listener = listener;
        this._loading = false;
    }
    Object.defineProperty(Loading.prototype, "loading", {
        get: function () {
            return this._loading;
        },
        set: function (value) {
            value = !!value;
            if (value === this._loading) {
                return;
            }
            this._loading = value;
            if (this.listener) {
                if (value) {
                    this.listener.startLoading();
                }
                else {
                    this.listener.doneLoading();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Loading.prototype.ngOnDestroy = function () {
        this.loading = false;
    };
    return Loading;
}());
export { Loading };
Loading.decorators = [
    { type: Directive, args: [{
                selector: "[clrLoading]"
            },] },
];
/** @nocollapse */
Loading.ctorParameters = function () { return [
    { type: LoadingListener, decorators: [{ type: Optional },] },
]; };
Loading.propDecorators = {
    'loading': [{ type: Input, args: ["clrLoading",] },],
};
//# sourceMappingURL=loading.js.map