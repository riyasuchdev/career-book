/*
 * Copyright (c) 2016 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, ContentChildren, EventEmitter, Input, Output } from "@angular/core";
import { TreeSelectionService } from "./providers/treeSelection.service";
import { TreeNode } from "./tree-node";
var TreeView = (function () {
    function TreeView(treeSelectionService) {
        this.treeSelectionService = treeSelectionService;
        /*Note: Experimental Feature. Might be removed*/
        this.isCompact = false;
        this.selectedChange = new EventEmitter(true);
    }
    TreeView.prototype.generateTreeSelection = function () {
        var treeSelection = [];
        this.children.forEach(function (child) { return treeSelection.push(child.toTreeSelection()); });
        return treeSelection.filter(function (selection) { return !!selection; });
    };
    /**
     * Verifies whether the input received is valid or not.
     * Throws an error if invalid.
     * @param selectionArray
     */
    TreeView.prototype.verifyInput = function (selectionArray) {
        var _this = this;
        //Check if selection is of type array
        //http://stackoverflow.com/a/4775737/3538394
        if (Object.prototype.toString.call(selectionArray) !== "[object Array]") {
            throw "clrTreeSelection should be of type array. Received " + typeof selectionArray;
        }
        selectionArray.forEach(function (selection) { return _this.treeSelectionService.verifyTreeSelection(selection); });
    };
    TreeView.prototype.populateTree = function (selectionArray) {
        if (this.children && selectionArray && selectionArray.length > 0) {
            this.children.toArray().forEach(function (child) { return child.matchTreeSelection(selectionArray); });
        }
    };
    Object.defineProperty(TreeView.prototype, "selected", {
        set: function (value) {
            this.verifyInput(value);
            this.treeSelectionService.selectable = true;
            this.initialInput = value;
        },
        enumerable: true,
        configurable: true
    });
    TreeView.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.treeSelectionService.change.subscribe(function () {
            if (_this.children) {
                _this.selectedChange.emit(_this.generateTreeSelection());
            }
        });
        this.populateTree(this.initialInput);
    };
    return TreeView;
}());
export { TreeView };
TreeView.decorators = [
    { type: Component, args: [{
                selector: "clr-tree",
                template: "\n      <!--\n        ~ Copyright (c) 2016 VMware, Inc. All Rights Reserved.\n        ~ This software is released under MIT license.\n        ~ The full license information can be found in LICENSE in the root directory of this project.\n        -->\n\n      <ng-content></ng-content>\n      <ng-content select=\"clr-tree-node\"></ng-content>\n    ",
                host: { "[class.clr-tree--compact]": "isCompact" },
                providers: [TreeSelectionService]
            },] },
];
/** @nocollapse */
TreeView.ctorParameters = function () { return [
    { type: TreeSelectionService, },
]; };
TreeView.propDecorators = {
    'children': [{ type: ContentChildren, args: [TreeNode,] },],
    'isCompact': [{ type: Input, args: ["clrTreeCompact",] },],
    'selected': [{ type: Input, args: ["clrTreeSelected",] },],
    'selectedChange': [{ type: Output, args: ["clrTreeSelectedChange",] },],
};
//# sourceMappingURL=tree-view.js.map