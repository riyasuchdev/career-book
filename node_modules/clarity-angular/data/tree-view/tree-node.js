/*
 * Copyright (c) 2016 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Component, ContentChildren, EventEmitter, Input, Output, Optional, SkipSelf } from "@angular/core";
import { trigger, animate, state, style, transition } from "@angular/animations";
import { AbstractTreeSelection } from "./abstract-tree-selection";
import { TreeSelectionService } from "./providers/treeSelection.service";
var TreeNode = (function (_super) {
    __extends(TreeNode, _super);
    function TreeNode(parent, treeSelectionService) {
        var _this = _super.call(this, parent, treeSelectionService) || this;
        _this.treeSelectionService = treeSelectionService;
        _this.nodeSelectedChange = new EventEmitter(true);
        _this.expanded = false;
        _this.expandedChange = new EventEmitter(true);
        _this.isExpandable = false;
        _this.loading = false;
        /*Note: Experimental Feature. Might be removed*/
        _this.isCompact = false;
        return _this;
    }
    Object.defineProperty(TreeNode.prototype, "children", {
        /**
         * Generates the child TreeNodes array from the ContentChildren QueryList
         * @returns {TreeNode[]|Array}
         */
        get: function () {
            var _this = this;
            return this._children ? this._children.toArray().filter(function (child) { return _this !== child; }) : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeNode.prototype, "nodeSelected", {
        get: function () {
            return this.selected;
        },
        set: function (value) {
            if (this.selected !== value) {
                this.selected = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    TreeNode.prototype.selectedChanged = function () {
        this.nodeSelectedChange.emit(this.selected);
    };
    Object.defineProperty(TreeNode.prototype, "hasChildren", {
        /**
         * Returns true if a TreeNode contains child TreeNodes and false otherwise.
         * @returns {boolean}
         */
        get: function () {
            if (this.children && this.children.length > 0) {
                return true;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeNode.prototype, "caretDirection", {
        /**
         * Determines the caret direction based on the expanded/collapsed
         * state of the TreeNode.
         *
         * Returns "down" when collapsed and "right" when expanded
         * @returns {string|string}
         */
        get: function () {
            return (this.expanded) ? "down" : "right";
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Clicking on the caret sign calls this method.
     * Toggles the expanded/collapsed state of the TreeNode
     */
    TreeNode.prototype.toggleExpand = function () {
        this.expanded = !this.expanded;
        this.expandedChange.emit(this.expanded);
    };
    Object.defineProperty(TreeNode.prototype, "selectable", {
        /**
         * Returns if the TreeNode is selectable or not
         * @returns {boolean}
         */
        get: function () {
            if (this.treeSelectionService) {
                return this.treeSelectionService.selectable;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    return TreeNode;
}(AbstractTreeSelection));
export { TreeNode };
TreeNode.decorators = [
    { type: Component, args: [{
                selector: "clr-tree-node",
                template: "\n      <!--\n        ~ Copyright (c) 2016 VMware, Inc. All Rights Reserved.\n        ~ This software is released under MIT license.\n        ~ The full license information can be found in LICENSE in the root directory of this project.\n        -->\n      <button\n          type=\"button\"\n          class=\"clr-treenode-caret\"\n          (click)=\"toggleExpand()\"\n          *ngIf=\"(isExpandable || hasChildren) && (!loading)\">\n          <clr-icon\n              shape=\"caret\"\n              [attr.dir]=\"caretDirection\"></clr-icon>\n      </button>\n      <span class=\"clr-treenode-spinner spinner\" *ngIf=\"isExpandable && loading\">\n          Loading...\n      </span>\n      <clr-checkbox\n          *ngIf=\"selectable\"\n          [(ngModel)]=\"selected\"\n          [clrIndeterminate]=\"indeterminate\"></clr-checkbox>\n      <div class=\"clr-treenode-content\">\n          <ng-content></ng-content>\n      </div>\n      <!-- FIXME: remove this string concatenation when boolean states are supported -->\n      <div\n          class=\"clr-treenode-children\"\n          [@collapse]=\"''+!expanded\">\n          <ng-content select=\"clr-tree-node\"></ng-content>\n      </div>\n    ",
                animations: [trigger("collapse", [
                        state("true", style({
                            "height": 0,
                            "overflow-y": "hidden"
                        })),
                        transition("true => false", [
                            animate("0.2s ease-in-out", style({
                                "height": "*",
                                "overflow-y": "hidden"
                            }))
                        ]),
                        transition("false => true", [
                            style({
                                "height": "*",
                                "overflow-y": "hidden"
                            }),
                            animate("0.2s ease-in-out")
                        ])
                    ])],
                host: { "[class.clr-tree--compact]": "isCompact" }
            },] },
];
/** @nocollapse */
TreeNode.ctorParameters = function () { return [
    { type: TreeNode, decorators: [{ type: Optional }, { type: SkipSelf },] },
    { type: TreeSelectionService, decorators: [{ type: Optional }, { type: SkipSelf },] },
]; };
TreeNode.propDecorators = {
    'model': [{ type: Input, args: ["clrTreeModel",] },],
    '_children': [{ type: ContentChildren, args: [TreeNode,] },],
    'nodeSelected': [{ type: Input, args: ["clrTreeNodeSelected",] },],
    'nodeSelectedChange': [{ type: Output, args: ["clrTreeNodeSelectedChange",] },],
    'expanded': [{ type: Input, args: ["clrTreeNodeExpanded",] },],
    'expandedChange': [{ type: Output, args: ["clrTreeNodeExpandedChange",] },],
    'isExpandable': [{ type: Input, args: ["clrTreeNodeExpandable",] },],
    'loading': [{ type: Input, args: ["clrTreeNodeLoading",] },],
    'isCompact': [{ type: Input, args: ["clrTreeCompact",] },],
};
//# sourceMappingURL=tree-node.js.map