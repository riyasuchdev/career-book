/*
 * Copyright (c) 2016 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
var AbstractTreeSelection = (function () {
    function AbstractTreeSelection(parent, treeSelectionService) {
        this.parent = parent;
        this.treeSelectionService = treeSelectionService;
        this._selected = false;
        this._indeterminate = false;
    }
    Object.defineProperty(AbstractTreeSelection.prototype, "selected", {
        get: function () {
            return this._selected;
        },
        set: function (value) {
            this._selected = value;
            this._indeterminate = false;
            this.children.forEach(function (child) { return child.parentChanged(value); });
            if (this.parent) {
                this.parent.childChanged();
            }
            this.treeSelectionService.notify();
            this.selectedChanged();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractTreeSelection.prototype, "indeterminate", {
        get: function () {
            return this._indeterminate;
        },
        enumerable: true,
        configurable: true
    });
    AbstractTreeSelection.prototype.childChanged = function () {
        var oneSelectedChild = false;
        var previousSelectedValue = this._selected;
        var previousIndeterminateValue = this._indeterminate;
        this._selected = true;
        this._indeterminate = false;
        for (var _i = 0, _a = this.children; _i < _a.length; _i++) {
            var child = _a[_i];
            if (child.indeterminate) {
                this._selected = false;
                this._indeterminate = true;
                break;
            }
            if (child.selected) {
                oneSelectedChild = true;
                if (this._selected === false) {
                    this._indeterminate = true;
                    break;
                }
            }
            else {
                this._selected = false;
                if (oneSelectedChild) {
                    this._indeterminate = true;
                    break;
                }
            }
        }
        if (this.parent
            && (this._selected !== previousSelectedValue
                || this._indeterminate !== previousIndeterminateValue)) {
            this.parent.childChanged();
        }
        if (this.selected !== previousSelectedValue) {
            this.selectedChanged();
        }
    };
    AbstractTreeSelection.prototype.parentChanged = function (selected) {
        if (selected && !this.selected) {
            this._selected = true;
            this._indeterminate = false;
            this.children.forEach(function (child) { return child.parentChanged(true); });
            this.selectedChanged();
        }
        if (!selected && (this.selected || this.indeterminate)) {
            this._selected = false;
            this._indeterminate = false;
            this.children.forEach(function (child) { return child.parentChanged(false); });
            this.selectedChanged();
        }
    };
    AbstractTreeSelection.prototype.toTreeSelection = function () {
        if (this.selected || this.indeterminate) {
            return {
                model: this.model,
                selected: this.selected,
                children: this.children.map(function (child) { return child.toTreeSelection(); })
                    .filter(function (child) { return !!child; })
            };
        }
        return null;
    };
    AbstractTreeSelection.prototype.matchTreeSelection = function (selectionArray) {
        var _loop_1 = function (selection) {
            if (this_1.model === selection.model) {
                if (this_1.selected !== selection.selected) {
                    this_1.selected = selection.selected;
                }
                if (selection.children) {
                    this_1.children.forEach(function (child) { return child.matchTreeSelection(selection.children); });
                }
                return "break";
            }
        };
        var this_1 = this;
        for (var _i = 0, selectionArray_1 = selectionArray; _i < selectionArray_1.length; _i++) {
            var selection = selectionArray_1[_i];
            var state_1 = _loop_1(selection);
            if (state_1 === "break")
                break;
        }
    };
    return AbstractTreeSelection;
}());
export { AbstractTreeSelection };
//# sourceMappingURL=abstract-tree-selection.js.map