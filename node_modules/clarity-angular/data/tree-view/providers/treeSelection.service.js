import { Injectable } from "@angular/core";
import { Subject } from "rxjs/Subject";
var TreeSelectionService = (function () {
    function TreeSelectionService() {
        this.selectable = false;
        //Boolean not necessary. Just emitting any value will indicate that a change has occurred
        this._change = new Subject();
    }
    Object.defineProperty(TreeSelectionService.prototype, "change", {
        get: function () {
            return this._change.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    ;
    TreeSelectionService.prototype.notify = function () {
        this._change.next(true);
    };
    TreeSelectionService.prototype.verifyTreeSelection = function (selection) {
        var _this = this;
        if (!selection.hasOwnProperty("selected")) {
            throw "clrTreeSelection should have the selected property";
        }
        //Check if the "children" property exists and is of type array
        if (selection.hasOwnProperty("children")) {
            if (Object.prototype.toString.call(selection.children) !== "[object Array]") {
                throw "clrTreeSelection should be of type array. Received type " +
                    typeof selection.children;
            }
            selection.children.forEach(function (child) { return _this.verifyTreeSelection(child); });
        }
    };
    return TreeSelectionService;
}());
export { TreeSelectionService };
TreeSelectionService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
TreeSelectionService.ctorParameters = function () { return []; };
//# sourceMappingURL=treeSelection.service.js.map