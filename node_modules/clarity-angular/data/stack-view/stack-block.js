/*
 * Copyright (c) 2016 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, EventEmitter, HostBinding, Input, Output, Optional, SkipSelf } from "@angular/core";
import { animate, state, style, transition, trigger } from "@angular/animations";
var StackBlock = (function () {
    /*
     * This would be more efficient with @ContentChildren, with the parent StackBlock
     * querying for children StackBlocks, but this feature is not available when downgrading
     * the component for Angular 1.
     */
    function StackBlock(parent) {
        this.parent = parent;
        this.expanded = false;
        this.expandedChange = new EventEmitter(false);
        this.expandable = false;
        this._changedChildren = 0;
        this._fullyInitialized = false;
        this._changed = false;
        if (parent) {
            parent.addChild();
        }
    }
    Object.defineProperty(StackBlock.prototype, "getChangedValue", {
        get: function () {
            return this._changed || (this._changedChildren > 0 && !this.expanded);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StackBlock.prototype, "setChangedValue", {
        set: function (value) {
            this._changed = value;
            if (this.parent && this._fullyInitialized) {
                if (value) {
                    this.parent._changedChildren++;
                }
                else {
                    this.parent._changedChildren--;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    StackBlock.prototype.ngOnInit = function () {
        //in order to access the parent StackBlock's properties,
        //the child StackBlock  has to be fully initialized at first.
        this._fullyInitialized = true;
    };
    StackBlock.prototype.addChild = function () {
        this.expandable = true;
    };
    StackBlock.prototype.toggleExpand = function () {
        if (this.expandable) {
            this.expanded = !this.expanded;
            this.expandedChange.emit(this.expanded);
        }
    };
    return StackBlock;
}());
export { StackBlock };
StackBlock.decorators = [
    { type: Component, args: [{
                selector: "clr-stack-block",
                template: "\n        <dt class=\"stack-block-label\" (click)=\"toggleExpand()\">\n            <ng-content select=\"clr-stack-label\"></ng-content>\n        </dt>\n        <dd class=\"stack-block-content\">\n            <ng-content></ng-content>\n        </dd>\n        <!-- FIXME: remove this string concatenation when boolean states are supported -->\n        <div [@collapse]=\"''+!expanded\" class=\"stack-children\">\n            <ng-content select=\"clr-stack-block\"></ng-content>\n        </div>\n    ",
                // Custom elements are inline by default
                styles: ["\n        :host { display: block; }\n    "],
                // Make sure the host has the proper class for styling purposes
                host: {
                    "[class.stack-block]": "true"
                },
                animations: [trigger("collapse", [
                        state("true", style({
                            "height": 0,
                            "overflow-y": "hidden"
                        })),
                        transition("true => false", [
                            animate("0.2s ease-in-out", style({
                                "height": "*",
                                "overflow-y": "hidden"
                            }))
                        ]),
                        transition("false => true", [
                            style({
                                "height": "*",
                                "overflow-y": "hidden"
                            }),
                            animate("0.2s ease-in-out")
                        ])
                    ])]
            },] },
];
/** @nocollapse */
StackBlock.ctorParameters = function () { return [
    { type: StackBlock, decorators: [{ type: SkipSelf }, { type: Optional },] },
]; };
StackBlock.propDecorators = {
    'expanded': [{ type: HostBinding, args: ["class.stack-block-expanded",] }, { type: Input, args: ["clrSbExpanded",] },],
    'expandedChange': [{ type: Output, args: ["clrSbExpandedChange",] },],
    'expandable': [{ type: HostBinding, args: ["class.stack-block-expandable",] }, { type: Input, args: ["clrSbExpandable",] },],
    'getChangedValue': [{ type: HostBinding, args: ["class.stack-block-changed",] },],
    'setChangedValue': [{ type: Input, args: ["clrSbNotifyChange",] },],
};
//# sourceMappingURL=stack-block.js.map