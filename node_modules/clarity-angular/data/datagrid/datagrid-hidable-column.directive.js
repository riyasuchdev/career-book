import { Directive, TemplateRef, ViewContainerRef, Input } from "@angular/core";
import { DatagridHideableColumn } from "./datagrid-hideable-column";
import { DatagridColumn } from "./datagrid-column";
/**
 * @class DatagridHideableColumnDirective
 *
 * @description
 * A structural directive meant to be used inside a clr-dg-column component.
 *
 * <clr-dg-column>
 *       <ng-container *clrDgHideableColumn="{ hidden: true }">
 *           User ID
 *       </ng-container>
 *   </clr-dg-column>
 *
 * It sets up state and properties so that columns can be manges for hide/show by a service and an internal
 * datagrid toggle component.
 *
 */
var DatagridHideableColumnDirective = (function () {
    /**
     * @description
     * Used the DatagridColumn to get and set an id for this HiddenColumn
     *
     * @param templateRef
     * @param viewContainerRef
     * @param hideableColumnService
     * @param dgColumn
     */
    function DatagridHideableColumnDirective(templateRef, viewContainerRef, dgColumn) {
        this.templateRef = templateRef;
        this.viewContainerRef = viewContainerRef;
        this.dgColumn = dgColumn;
        this.columnId = dgColumn.columnId;
    }
    Object.defineProperty(DatagridHideableColumnDirective.prototype, "clrDgHideableColumn", {
        /**
         * @function clrDgHideableColumn
         *
         * @description
         * Setter fn for the @Input with the same name as this structural directive.
         * It allows the user to pre-configure the column's hide/show state. { hidden: true }
         * It's more verbose but has more Clarity.
         *
         * @default false
         *
         * @type object
         *
         * @example
         * *clrDgHideableColumn
         * *clrDgHideableColumn={hidden: false}
         * *clrDgHideableColumn={hidden: true}
         *
         * @param value
         *
         */
        set: function (value) {
            this._hidden = (value && value.hidden) ? value.hidden : false;
            if (this.dgColumn.hideable) {
                this.dgColumn.hideable.hidden = (value && value.hidden) ? value.hidden : false;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @function ngAfterViewInit
     *
     * @description
     * Responsible for setting up the items needed for a HideableColum.
     *
     * Use the templateRef to create this view and store it in the column service.
     * Create instance of the utility class DatagridHideableColumn.
     */
    DatagridHideableColumnDirective.prototype.ngAfterViewInit = function () {
        this.viewContainerRef.createEmbeddedView(this.templateRef);
        // Note this is on the parent instance of DatagridColumn.
        this.dgColumn.hideable = new DatagridHideableColumn(this.templateRef, this.columnId, this._hidden);
    };
    return DatagridHideableColumnDirective;
}());
export { DatagridHideableColumnDirective };
DatagridHideableColumnDirective.decorators = [
    { type: Directive, args: [{
                selector: "[clrDgHideableColumn]"
            },] },
];
/** @nocollapse */
DatagridHideableColumnDirective.ctorParameters = function () { return [
    { type: TemplateRef, },
    { type: ViewContainerRef, },
    { type: DatagridColumn, },
]; };
DatagridHideableColumnDirective.propDecorators = {
    'clrDgHideableColumn': [{ type: Input, args: ["clrDgHideableColumn",] },],
};
//# sourceMappingURL=datagrid-hidable-column.directive.js.map