/*
 * Copyright (c) 2016-2017 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
/*
 * This is a hack that we have to write for now because of bugs and limitations in Angular,
 * please do not use this as an example.
 */
import { Directive, ElementRef, Renderer2 } from "@angular/core";
import { DomAdapter } from "../render/dom-adapter";
import { RowExpand } from "../providers/row-expand";
import { DatagridRenderOrganizer } from "../render/render-organizer";
var DatagridRowExpandAnimation = (function () {
    function DatagridRowExpandAnimation(el, domAdapter, renderer, expand, renderOrganizer) {
        var _this = this;
        this.el = el;
        this.domAdapter = domAdapter;
        this.renderer = renderer;
        this.expand = expand;
        this.renderOrganizer = renderOrganizer;
        expand.animate.subscribe(function () {
            // We already had an animation waiting, so we just have to run in, not prepare again
            if (_this.oldHeight) {
                setTimeout(function () { return _this.run(); });
            }
            else {
                _this.animate();
            }
        });
    }
    /*
     * Dirty manual animation handling, but we have no way to use dynamic heights in Angular's current API.
     * They're working on it, but have no ETA.
     */
    DatagridRowExpandAnimation.prototype.animate = function () {
        var _this = this;
        // Check if we do have web-animations available. If not, just skip the animation.
        if (!this.el.nativeElement.animate) {
            return;
        }
        // We had an animation running, we skip to the end
        if (this.running) {
            this.running.finish();
        }
        this.oldHeight = this.domAdapter.computedHeight(this.el.nativeElement);
        // We set the height of the element immediately to avoid a flicker before the animation starts.
        this.renderer.setStyle(this.el.nativeElement, "height", this.oldHeight + "px");
        this.renderer.setStyle(this.el.nativeElement, "overflow-y", "hidden");
        setTimeout(function () {
            if (_this.expand.loading) {
                return;
            }
            _this.run();
        });
    };
    DatagridRowExpandAnimation.prototype.run = function () {
        var _this = this;
        this.renderer.setStyle(this.el.nativeElement, "height", null);
        // I don't like realigning the columns before the animation, since the scrollbar could appear or disappear
        // halfway, but that's a compromise we have to make for now. We can look into a smarter fix later.
        this.renderOrganizer.scrollbar.next();
        var newHeight = this.domAdapter.computedHeight(this.el.nativeElement);
        this.running = this.el.nativeElement.animate({
            height: [this.oldHeight + "px", newHeight + "px"],
            overflowY: ["hidden", "hidden"],
            easing: "ease-in-out"
        }, {
            duration: 200
        });
        this.running.onfinish = function () {
            _this.renderer.setStyle(_this.el.nativeElement, "overflow-y", null);
            delete _this.running;
        };
        delete this.oldHeight;
    };
    return DatagridRowExpandAnimation;
}());
export { DatagridRowExpandAnimation };
DatagridRowExpandAnimation.decorators = [
    { type: Directive, args: [{
                selector: "clr-dg-row"
            },] },
];
/** @nocollapse */
DatagridRowExpandAnimation.ctorParameters = function () { return [
    { type: ElementRef, },
    { type: DomAdapter, },
    { type: Renderer2, },
    { type: RowExpand, },
    { type: DatagridRenderOrganizer, },
]; };
//# sourceMappingURL=row-expand-animation.js.map