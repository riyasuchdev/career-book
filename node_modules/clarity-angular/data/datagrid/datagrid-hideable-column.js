/*
 * Copyright (c) 2016 -2017 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Subject } from "rxjs/Subject";
/**
 * @class DatagridHideableColumn
 *
 * @description
 * A utility class for that adds hide/show functionality to a column, its cells and enables a toggler in the
 * DatagridColumnToggle Component.
 *
 */
var DatagridHideableColumn = (function () {
    /**
     * @constructor
     *
     * @description
     * The init function for DatagridHideableColumn instances that does the following:
     *
     * 1. Set values for the private variables that enable a hideable column
     * 2. Broadcast the next hidden change for anyone (already) subscribed to this DatagridHideableColumn
     * TODO: Debug and verify that #2 is really necessary.
     *
     * @param _template
     * @param _id
     * @param _hidden
     */
    function DatagridHideableColumn(_template, _id, _hidden) {
        if (_hidden === void 0) { _hidden = true; }
        this._template = _template;
        this._id = _id;
        this._hidden = _hidden;
        /**
         * @property hiddenChanges
         *
         * @description
         * A stream of state changes an instance of DatagridHideableColumn will broadcast to subscribers.
         *
         * @type {Subject<boolean>}
         */
        this.hiddenChangesState = new Subject();
        // Flag this true when the service only has one visible column open.
        this.lastVisibleColumn = false;
        this.hiddenChangesState.next(_hidden);
    }
    Object.defineProperty(DatagridHideableColumn.prototype, "template", {
        /**
         * @function template
         *
         * @description
         * A getter function that returns an TemplateRef of the DatagridColumn that is hideable. This is currently used to
         * populate the DatagridColumnToggle UI with the correct Column name.
         *
         * @returns {TemplateRef<any>}
         */
        get: function () {
            return this._template;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridHideableColumn.prototype, "id", {
        /**
         * @function id
         *
         * @description
         * public function that returns the id of a HideableCOlumn instance. Used by the HideableCOlumnService for passing
         * state and actions between DateGridColumns, DataGridCells & the DatagridColumnToggle Components.
         *
         * @returns {string}
         */
        get: function () {
            return this._id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridHideableColumn.prototype, "hidden", {
        /**
         * @function hidden
         *
         * @description
         * A getter that returns the hidden value of a DatagridHideableColumn instance.
         * TODO: debug and make sure you really need this since we have the hiddenCHanges observable.
         *
         * @returns {boolean}
         */
        get: function () {
            return this._hidden;
        },
        /**
         * @function hidden
         *
         * @description
         * The setter for setting the hidden state of a DatagridHideableColumn instance.
         * It also broadcasts the change after its set.
         *
         * @param value
         */
        set: function (value) {
            if (this._hidden === value) {
                return;
            }
            this._hidden = value;
            this.hiddenChangesState.next(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridHideableColumn.prototype, "hiddenChangeState", {
        /**
         * @function hiddenChangeState
         *
         * @description
         * An Observable for the HideableColumns hidden changes.
         *
         * @returns {Observable<boolean>}
         */
        get: function () {
            return this.hiddenChangesState.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    return DatagridHideableColumn;
}());
export { DatagridHideableColumn };
//# sourceMappingURL=datagrid-hideable-column.js.map