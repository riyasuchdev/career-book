/*
 * Copyright (c) 2016-2017 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, ContentChild, ContentChildren, EventEmitter, Input, Output } from "@angular/core";
import { DatagridPropertyComparator } from "./built-in/comparators/datagrid-property-comparator";
import { DatagridPropertyStringFilter } from "./built-in/filters/datagrid-property-string-filter";
import { DatagridItems } from "./datagrid-items";
import { DatagridRow } from "./datagrid-row";
import { DatagridPlaceholder } from "./datagrid-placeholder";
import { DatagridIfExpanded } from "./datagrid-if-expanded";
import { FiltersProvider } from "./providers/filters";
import { Items } from "./providers/items";
import { Page } from "./providers/page";
import { Selection, SelectionType } from "./providers/selection";
import { Sort } from "./providers/sort";
import { RowActionService } from "./providers/row-action-service";
import { GlobalExpandableRows } from "./providers/global-expandable-rows";
import { DatagridRenderOrganizer } from "./render/render-organizer";
import { DatagridActionOverflow } from "./datagrid-action-overflow";
import { DatagridStringFilterImpl } from "./built-in/filters/datagrid-string-filter-impl";
import { HideableColumnService } from "./providers/hideable-column.service";
import { DatagridColumn } from "./datagrid-column";
var Datagrid = (function () {
    function Datagrid(columnService, filters, organizer, page, sort, items, expandableRows, selection, rowActionService) {
        this.columnService = columnService;
        this.filters = filters;
        this.organizer = organizer;
        this.page = page;
        this.sort = sort;
        this.items = items;
        this.expandableRows = expandableRows;
        this.selection = selection;
        this.rowActionService = rowActionService;
        /* reference to the enum so that template can access */
        this.SELECTION_TYPE = SelectionType;
        /**
         * Output emitted whenever the data needs to be refreshed, based on user action or external ones
         */
        this.refresh = new EventEmitter(false);
        this.selectedChanged = new EventEmitter(false);
        this.singleSelectedChanged = new EventEmitter(false);
        /**
         * Subscriptions to all the services and queries changes
         */
        this._subscriptions = [];
    }
    Object.defineProperty(Datagrid.prototype, "loading", {
        /**
         * Freezes the datagrid while data is loading
         */
        get: function () {
            return this.items.loading;
        },
        set: function (value) {
            this.items.loading = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Emits a State output to ask for the data to be refreshed
     */
    Datagrid.prototype.triggerRefresh = function () {
        var state = {};
        if (this.page.size > 0) {
            state.page = {
                from: this.page.firstItem,
                to: this.page.lastItem,
                size: this.page.size
            };
        }
        if (this.sort.comparator) {
            if (this.sort.comparator instanceof DatagridPropertyComparator) {
                /*
                 * Special case for the default object property comparator,
                 * we give the property name instead of the actual comparator.
                 */
                state.sort = {
                    by: this.sort.comparator.prop,
                    reverse: this.sort.reverse
                };
            }
            else {
                state.sort = {
                    by: this.sort.comparator,
                    reverse: this.sort.reverse
                };
            }
        }
        var activeFilters = this.filters.getActiveFilters();
        if (activeFilters.length > 0) {
            state.filters = [];
            for (var _i = 0, activeFilters_1 = activeFilters; _i < activeFilters_1.length; _i++) {
                var filter = activeFilters_1[_i];
                if (filter instanceof DatagridStringFilterImpl) {
                    var stringFilter = filter.filterFn;
                    if (stringFilter instanceof DatagridPropertyStringFilter) {
                        /*
                         * Special case again for the default object property filter,
                         * we give the property name instead of the full filter object.
                         */
                        state.filters.push({
                            property: stringFilter.prop,
                            value: filter.value
                        });
                        continue;
                    }
                }
                state.filters.push(filter);
            }
        }
        this.refresh.emit(state);
    };
    /**
     * Public method to re-trigger the computation of displayed items manually
     */
    Datagrid.prototype.dataChanged = function () {
        this.items.refresh();
    };
    Object.defineProperty(Datagrid.prototype, "selected", {
        /**
         * Array of all selected items
         */
        set: function (value) {
            if (value) {
                this.selection.selectionType = SelectionType.Multi;
            }
            else {
                this.selection.selectionType = SelectionType.None;
            }
            this.selection.current = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Datagrid.prototype, "singleSelected", {
        /**
         * Selected item in single-select mode
         */
        set: function (value) {
            this.selection.selectionType = SelectionType.Single;
            if (value) {
                this.selection.currentSingle = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Datagrid.prototype, "allSelected", {
        /**
         * Indicates if all currently displayed items are selected
         */
        get: function () {
            return this.selection.isAllSelected();
        },
        /**
         * Selects/deselects all currently displayed items
         * @param value
         */
        set: function (value) {
            /*
             * This is a setter but we ignore the value.
             * It's strange, but it lets us have an indeterminate state where only
             * some of the items are selected.
             */
            this.selection.toggleAll();
        },
        enumerable: true,
        configurable: true
    });
    Datagrid.prototype.ngAfterContentInit = function () {
        var _this = this;
        // TODO: Move all this to ngOnInit() once https://github.com/angular/angular/issues/12818 goes in.
        // And when we do that, remove the manual step for each one.
        this._subscriptions.push(this.actionableRows.changes.subscribe(function () {
            /*if at least one row has actionable overflow, show a placeholder cell in every other row.*/
            _this.rowActionService.hasActionableRow = _this.actionableRows.length > 0;
        }));
        this.rowActionService.hasActionableRow = this.actionableRows.length > 0;
        this._subscriptions.push(this.details.changes.subscribe(function () {
            /* if at least one row is expandable, show a placeholder cell in every other row.*/
            _this.expandableRows.hasExpandableRow = _this.details.length > 0;
        }));
        this.expandableRows.hasExpandableRow = this.details.length > 0;
        this._subscriptions.push(this.rows.changes.subscribe(function () {
            if (!_this.items.smart) {
                _this.items.all = _this.rows.map(function (row) { return row.item; });
            }
        }));
        if (!this.items.smart) {
            this.items.all = this.rows.map(function (row) { return row.item; });
        }
    };
    /**
     * Our setup happens in the view of some of our components, so we wait for it to be done before starting
     */
    Datagrid.prototype.ngAfterViewInit = function () {
        var _this = this;
        // TODO: determine if we can get rid of provider wiring in view init so that subscriptions can be done earlier
        this.triggerRefresh();
        this._subscriptions.push(this.sort.change.subscribe(function () { return _this.triggerRefresh(); }));
        this._subscriptions.push(this.filters.change.subscribe(function () { return _this.triggerRefresh(); }));
        this._subscriptions.push(this.page.change.subscribe(function () { return _this.triggerRefresh(); }));
        this._subscriptions.push(this.selection.change.subscribe(function (s) {
            if (_this.selection.selectionType === SelectionType.Single) {
                _this.singleSelectedChanged.emit(s);
            }
            else if (_this.selection.selectionType === SelectionType.Multi) {
                _this.selectedChanged.emit(s);
            }
        }));
        this._subscriptions.push(this.columns.changes.subscribe(function (columns) {
            _this.columnService.updateColumnList(_this.columns.map(function (col) { return col.hideable; }));
        }));
        // Get ColumnService ready for HideableColumns.
        this.columnService.updateColumnList(this.columns.map(function (col) { return col.hideable; }));
    };
    Datagrid.prototype.ngOnDestroy = function () {
        this._subscriptions.forEach(function (sub) { return sub.unsubscribe(); });
    };
    Datagrid.prototype.resize = function () {
        this.organizer.resize();
    };
    return Datagrid;
}());
export { Datagrid };
Datagrid.decorators = [
    { type: Component, args: [{
                selector: "clr-datagrid",
                template: "\n      <!--\n        ~ Copyright (c) 2016-2017 VMware, Inc. All Rights Reserved.\n        ~ This software is released under MIT license.\n        ~ The full license information can be found in LICENSE in the root directory of this project.\n        -->\n\n      <ng-content select=\"clr-dg-action-bar\"></ng-content>\n      <div class=\"datagrid-overlay-wrapper\">\n          <div class=\"datagrid-scroll-wrapper\">\n              <div class=\"datagrid\" #datagrid>\n                  <div clrDgTableWrapper class=\"datagrid-table-wrapper\">\n                      <div clrDgHead class=\"datagrid-head\">\n                          <div class=\"datagrid-row datagrid-row-flex\">\n                              <!-- header for datagrid where you can select multiple rows -->\n                              <div class=\"datagrid-column datagrid-select datagrid-fixed-column\"\n                                   *ngIf=\"selection.selectionType === SELECTION_TYPE.Multi\">\n                              <span class=\"datagrid-column-title\">\n                                  <clr-checkbox [(ngModel)]=\"allSelected\"></clr-checkbox>\n                              </span>\n                                  <div class=\"datagrid-column-separator\"></div>\n                              </div>\n                              <!-- header for datagrid where you can select one row only -->\n                              <div class=\"datagrid-column datagrid-select datagrid-fixed-column\"\n                                   *ngIf=\"selection.selectionType === SELECTION_TYPE.Single\">\n                                  <div class=\"datagrid-column-separator\"></div>\n                              </div>\n                              <!-- header for single row action; only display if we have at least one actionable row in datagrid -->\n                              <div class=\"datagrid-column datagrid-row-actions datagrid-fixed-column\"\n                                   *ngIf=\"rowActionService.hasActionableRow\">\n                                  <div class=\"datagrid-column-separator\"></div>\n                              </div>\n                              <!-- header for carets; only display if we have at least one expandable row in datagrid -->\n                              <div class=\"datagrid-column datagrid-expandable-caret datagrid-fixed-column\"\n                                   *ngIf=\"expandableRows.hasExpandableRow\">\n                                  <div class=\"datagrid-column-separator\"></div>\n                              </div>\n                              <ng-content select=\"clr-dg-column\"></ng-content>\n                          </div>\n                      </div>\n\n                      <div clrDgBody class=\"datagrid-body\">\n                          <ng-template *ngIf=\"iterator\"\n                                       ngFor [ngForOf]=\"items.displayed\" [ngForTrackBy]=\"items.trackBy\"\n                                       [ngForTemplate]=\"iterator.template\"></ng-template>\n                          <ng-content *ngIf=\"!iterator\"></ng-content>\n\n                          <!-- Custom placeholder overrides the default empty one -->\n                          <ng-content select=\"clr-dg-placeholder\"></ng-content>\n                          <clr-dg-placeholder *ngIf=\"!placeholder\"></clr-dg-placeholder>\n                      </div>\n                  </div>\n\n                  <!--\n                      This is not inside the table because there is no good way of having a single column span\n                      everything when using custom elements with display:table-cell.\n                  -->\n                  <ng-content select=\"clr-dg-footer\"></ng-content>\n              </div>\n          </div>\n          <div class=\"datagrid-spinner\" *ngIf=\"loading\">\n              <div class=\"spinner\">Loading...</div>\n          </div>\n      </div>\n    ",
                providers: [Selection, Sort, FiltersProvider, Page, Items, DatagridRenderOrganizer,
                    RowActionService, GlobalExpandableRows, HideableColumnService],
                host: {
                    "[class.datagrid-host]": "true"
                }
            },] },
];
/** @nocollapse */
Datagrid.ctorParameters = function () { return [
    { type: HideableColumnService, },
    { type: FiltersProvider, },
    { type: DatagridRenderOrganizer, },
    { type: Page, },
    { type: Sort, },
    { type: Items, },
    { type: GlobalExpandableRows, },
    { type: Selection, },
    { type: RowActionService, },
]; };
Datagrid.propDecorators = {
    'loading': [{ type: Input, args: ["clrDgLoading",] },],
    'refresh': [{ type: Output, args: ["clrDgRefresh",] },],
    'iterator': [{ type: ContentChild, args: [DatagridItems,] },],
    'selected': [{ type: Input, args: ["clrDgSelected",] },],
    'selectedChanged': [{ type: Output, args: ["clrDgSelectedChange",] },],
    'singleSelected': [{ type: Input, args: ["clrDgSingleSelected",] },],
    'singleSelectedChanged': [{ type: Output, args: ["clrDgSingleSelectedChange",] },],
    'placeholder': [{ type: ContentChild, args: [DatagridPlaceholder,] },],
    'columns': [{ type: ContentChildren, args: [DatagridColumn,] },],
    'rows': [{ type: ContentChildren, args: [DatagridRow,] },],
    'actionableRows': [{ type: ContentChildren, args: [DatagridActionOverflow, { descendants: true },] },],
    'details': [{ type: ContentChildren, args: [DatagridIfExpanded, { descendants: true },] },],
};
//# sourceMappingURL=datagrid.js.map