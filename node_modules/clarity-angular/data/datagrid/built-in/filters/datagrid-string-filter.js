var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
 * Copyright (c) 2016-2017 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, Input, ViewChild, Renderer2, EventEmitter, Output } from "@angular/core";
import { CustomFilter } from "../../providers/custom-filter";
import { DatagridFilter } from "../../datagrid-filter";
import { DatagridStringFilterImpl } from "./datagrid-string-filter-impl";
import { DatagridFilterRegistrar } from "../../utils/datagrid-filter-registrar";
import { FiltersProvider, RegisteredFilter } from "../../providers/filters";
import { DomAdapter } from "../../render/dom-adapter";
var DatagridStringFilter = (function (_super) {
    __extends(DatagridStringFilter, _super);
    function DatagridStringFilter(renderer, filters, domAdapter) {
        var _this = _super.call(this, filters) || this;
        _this.renderer = renderer;
        _this.domAdapter = domAdapter;
        /**
         * Indicates if the filter dropdown is open
         */
        _this.open = false;
        _this.filterValueChange = new EventEmitter();
        return _this;
    }
    Object.defineProperty(DatagridStringFilter.prototype, "customStringFilter", {
        /**
         * Customizable filter logic based on a search text
         */
        set: function (value) {
            if (value instanceof RegisteredFilter) {
                this.setFilter(value);
            }
            else {
                this.setFilter(new DatagridStringFilterImpl(value));
            }
        },
        enumerable: true,
        configurable: true
    });
    DatagridStringFilter.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.filterContainer.openChanged.subscribe(function (open) {
            if (open) {
                // We need the timeout because at the time this executes, the input isn't
                // displayed yet.
                setTimeout(function () {
                    _this.domAdapter.focus(_this.input.nativeElement);
                });
            }
        });
    };
    Object.defineProperty(DatagridStringFilter.prototype, "value", {
        /**
         * Common setter for the input value
         */
        get: function () {
            return this.filter.value;
        },
        set: function (value) {
            if (!this.filter) {
                return;
            }
            if (!value) {
                value = "";
            }
            if (value !== this.filter.value) {
                this.filter.value = value;
                this.filterValueChange.emit(value);
            }
        },
        enumerable: true,
        configurable: true
    });
    DatagridStringFilter.prototype.close = function () {
        this.open = false;
    };
    return DatagridStringFilter;
}(DatagridFilterRegistrar));
export { DatagridStringFilter };
DatagridStringFilter.decorators = [
    { type: Component, args: [{
                selector: "clr-dg-string-filter",
                providers: [{ provide: CustomFilter, useExisting: DatagridStringFilter }],
                template: "\n        <clr-dg-filter [clrDgFilter]=\"registered\" [(clrDgFilterOpen)]=\"open\">\n            <!--\n                Even though this *ngIf looks useless because the filter container already has one,\n                it prevents NgControlStatus and other directives automatically added by Angular\n                on inputs with NgModel from freaking out because of their host binding changing\n                mid-change detection when the input is destroyed.\n            -->\n            <input #input type=\"text\" name=\"search\" [(ngModel)]=\"value\" *ngIf=\"open\"\n                (keyup.enter)=\"close()\" (keyup.escape)=\"close()\"/>\n        </clr-dg-filter>\n    "
            },] },
];
/** @nocollapse */
DatagridStringFilter.ctorParameters = function () { return [
    { type: Renderer2, },
    { type: FiltersProvider, },
    { type: DomAdapter, },
]; };
DatagridStringFilter.propDecorators = {
    'customStringFilter': [{ type: Input, args: ["clrDgStringFilter",] },],
    'input': [{ type: ViewChild, args: ["input",] },],
    'filterContainer': [{ type: ViewChild, args: [DatagridFilter,] },],
    'value': [{ type: Input, args: ["clrFilterValue",] },],
    'filterValueChange': [{ type: Output, args: ["clrFilterValueChange",] },],
};
//# sourceMappingURL=datagrid-string-filter.js.map