/*
 * Copyright (c) 2016-2017 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Directive, ElementRef, Renderer2 } from "@angular/core";
import { DomAdapter } from "./dom-adapter";
import { STRICT_WIDTH_CLASS } from "./constants";
import { DatagridRenderOrganizer } from "./render-organizer";
import { DatagridColumnResizer } from "./column-resizer";
var DatagridHeaderRenderer = (function () {
    function DatagridHeaderRenderer(el, renderer, organizer, domAdapter, columnResizer) {
        var _this = this;
        this.el = el;
        this.renderer = renderer;
        this.organizer = organizer;
        this.domAdapter = domAdapter;
        this.columnResizer = columnResizer;
        this.widthSet = false;
        this.subscription = organizer.clearWidths.subscribe(function () { return _this.clearWidth(); });
    }
    DatagridHeaderRenderer.prototype.ngOnDestroy = function () {
        this.subscription.unsubscribe();
    };
    DatagridHeaderRenderer.prototype.clearWidth = function () {
        // remove the width only if we set it, and it is not changed by dragging.
        if (this.widthSet && !this.columnResizer.columnResizeBy) {
            this.renderer.setStyle(this.el.nativeElement, "width", null);
        }
        var strictWidth = this.domAdapter.userDefinedWidth(this.el.nativeElement);
        if (this.columnResizer.columnResizeBy) {
            strictWidth = this.columnResizer.columnRectWidth + this.columnResizer.columnResizeBy;
        }
        if (strictWidth) {
            this.strictWidth = strictWidth;
        }
        else {
            delete this.strictWidth;
        }
    };
    DatagridHeaderRenderer.prototype.computeWidth = function () {
        var width = this.strictWidth;
        if (!!width) {
            this.renderer.addClass(this.el.nativeElement, STRICT_WIDTH_CLASS);
        }
        else {
            this.renderer.removeClass(this.el.nativeElement, STRICT_WIDTH_CLASS);
        }
        if (this.columnResizer.columnResizeBy) {
            this.renderer.setStyle(this.el.nativeElement, "width", width + "px");
            this.columnResizer.columnResizeBy = 0;
            this.widthSet = false;
        }
        if (!width) {
            width = this.domAdapter.scrollWidth(this.el.nativeElement);
            this.renderer.setStyle(this.el.nativeElement, "width", width + "px");
            this.widthSet = true;
        }
        return width;
    };
    return DatagridHeaderRenderer;
}());
export { DatagridHeaderRenderer };
DatagridHeaderRenderer.decorators = [
    { type: Directive, args: [{
                selector: "clr-dg-column"
            },] },
];
/** @nocollapse */
DatagridHeaderRenderer.ctorParameters = function () { return [
    { type: ElementRef, },
    { type: Renderer2, },
    { type: DatagridRenderOrganizer, },
    { type: DomAdapter, },
    { type: DatagridColumnResizer, },
]; };
//# sourceMappingURL=header-renderer.js.map