/*
 * Copyright (c) 2016 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, Input, Output, forwardRef, EventEmitter } from "@angular/core";
import { NG_VALUE_ACCESSOR } from "@angular/forms";
/**
 * Private counter to generate unique IDs for the checkboxes, to bind the labels to them.
 */
var latestId = 0;
var Checkbox = (function () {
    function Checkbox() {
        // If our host has an ID attribute, we use this instead of our index.
        this._id = (latestId++).toString();
        // If our host has a name attribute, we apply it to the checkbox.
        this.name = null;
        // If the host is disabled we apply it to the checkbox
        this.disabled = false;
        // Support for inline checkboxes, adds the necessary class to the host
        this.inline = false;
        this._checked = false;
        this._indeterminate = false;
        this.indeterminateChange = new EventEmitter(false);
        this.change = new EventEmitter(false);
        /*
         * These callbacks will be given to us through the ControlValueAccessor interface,
         * and we need to call them when the user interacts with the checkbox.
         */
        this.onChangeCallback = function (_) {
        };
        this.onTouchedCallback = function () {
        };
    }
    Object.defineProperty(Checkbox.prototype, "id", {
        get: function () {
            return "clr-checkbox-" + this._id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Checkbox.prototype, "checked", {
        get: function () {
            return this._checked;
        },
        set: function (value) {
            if (value !== this._checked) {
                if (this._indeterminate) {
                    this.setIndeterminate(false);
                }
                this.setChecked(value);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Checkbox.prototype, "indeterminate", {
        get: function () {
            return this._indeterminate;
        },
        set: function (value) {
            if (this._indeterminate !== value) {
                if (this._checked) {
                    this.setChecked(false);
                }
                this.setIndeterminate(value);
            }
        },
        enumerable: true,
        configurable: true
    });
    Checkbox.prototype.setIndeterminate = function (value) {
        this._indeterminate = value;
        this.indeterminateChange.emit(this._indeterminate);
    };
    Checkbox.prototype.setChecked = function (value) {
        this._checked = value;
        this.change.emit(this._checked);
    };
    Checkbox.prototype.toggle = function () {
        this.checked = !this.checked;
        this.onChangeCallback(this.checked);
    };
    Checkbox.prototype.writeValue = function (value) {
        if (value === null) {
            value = false;
        }
        if (value !== this.checked) {
            this.checked = value;
        }
    };
    Checkbox.prototype.registerOnChange = function (onChange) {
        this.onChangeCallback = onChange;
    };
    Checkbox.prototype.registerOnTouched = function (onTouched) {
        this.onTouchedCallback = onTouched;
    };
    Checkbox.prototype.touch = function () {
        this.onTouchedCallback();
    };
    Checkbox.prototype.checkIndeterminateState = function () {
        if (!this.disabled) {
            this.toggle();
        }
    };
    return Checkbox;
}());
export { Checkbox };
Checkbox.decorators = [
    { type: Component, args: [{
                selector: "clr-checkbox",
                template: "\n        <!--\n            FIXME: We are not subscribed to the change event but the click event here.\n            The reason for that is because checkboxes behave differently on IE & Edge.\n            https://stackoverflow.com/a/19447939\n            \n            To fix that, we listen to every click event and then toggle the checkbox manually\n            to make it behave the same way across the browsers we support.\n            \n            This works for cases when users toggle the checkbox using the keyboard too:\n            https://stackoverflow.com/questions/27878940/spacebar-triggering-click-event-on-checkbox\n        -->\n        <input type=\"checkbox\" [id]=\"id\" [name]=\"name\" [checked]=\"checked\"\n               [indeterminate]=\"indeterminate\" [disabled]=\"disabled\"\n               (blur)=\"touch()\" (click)=\"checkIndeterminateState()\">\n        <label [attr.for]=\"id\">\n            <ng-content></ng-content>\n        </label>\n    ",
                host: {
                    "[class.checkbox]": "!inline",
                    "[class.checkbox-inline]": "inline",
                    "[class.disabled]": "disabled"
                },
                /*
                 * This provider lets us declare our checkbox as a ControlValueAccessor,
                 * which allows us to use [(ngModel)] directly on our component,
                 * with all the automatic features wiring that come with it.
                 */
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(function () { return Checkbox; }),
                        multi: true
                    }]
            },] },
];
/** @nocollapse */
Checkbox.ctorParameters = function () { return []; };
Checkbox.propDecorators = {
    '_id': [{ type: Input, args: ["id",] },],
    'name': [{ type: Input, args: ["name",] },],
    'disabled': [{ type: Input, args: ["clrDisabled",] },],
    'inline': [{ type: Input, args: ["clrInline",] },],
    'checked': [{ type: Input, args: ["clrChecked",] },],
    'indeterminate': [{ type: Input, args: ["clrIndeterminate",] },],
    'indeterminateChange': [{ type: Output, args: ["clrIndeterminateChange",] },],
    'change': [{ type: Output, args: ["clrCheckedChange",] },],
};
//# sourceMappingURL=checkbox.js.map