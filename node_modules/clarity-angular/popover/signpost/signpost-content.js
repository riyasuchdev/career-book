import { Component, ElementRef, HostListener
// AfterViewInit, HostListener, OnDestroy, OnInit, Renderer2, ElementRef
 } from "@angular/core";
import { IfOpenService } from "./if-open.service";
var SignpostContent = (function () {
    function SignpostContent(ifOpenService, elementRef) {
        this.ifOpenService = ifOpenService;
        this.elementRef = elementRef;
        /**********
         * @param nbClick
         *
         * @description
         * Used to keep count of the clicks heard by the @HostListener. We always, always, always ignores the first click
         * (i.e - the click that opened the SignpostContent)
         * @type {number}
         */
        this.nbClick = 0;
    }
    /**********
     * @function close
     *
     * @description
     * Close function that uses the signpost instance to toggle the state of the content popover.
     *
     */
    SignpostContent.prototype.close = function () {
        this.ifOpenService.open = false;
    };
    /**********
     * @function onClick
     *
     * @description
     * This function is an angular @HostListener that listens for clicks on the document and
     * 1. Ignores any clicks inside the host
     * 2. Always, always always ignores the first click (i.e - the click that opened the SignpostContent)
     *
     * @param target
     */
    SignpostContent.prototype.onClick = function (target) {
        if (this.ifOpenService.open) {
            if (this.nbClick === 0) {
                // Ignore the first click so we don't auto close the SignpostContent.
                this.nbClick++;
                return;
            }
            var current = target; //Get the element in the DOM on which the mouse was clicked
            var signpostContentHost = this.elementRef.nativeElement; //Get current signpost native HTML element
            //Start checking if current and signpost host are equal. If not traverse to the parentNode and check again.
            while (current) {
                if (current === signpostContentHost) {
                    return;
                }
                current = current.parentNode;
            }
            this.ifOpenService.open = false; //Remove .open from the dropdown
        }
    };
    return SignpostContent;
}());
export { SignpostContent };
SignpostContent.decorators = [
    { type: Component, args: [{
                selector: "clr-signpost-content",
                template: "\n        <div class=\"signpost-flex-wrap\">\n            <div class=\"popover-pointer\"></div>\n            <div class=\"signpost-content-header\">\n                <button type=\"button\" class=\"signpost-action close\" aria-label=\"Close\" (click)=\"close()\">\n                    <clr-icon aria-hidden=\"true\" shape=\"close\"></clr-icon>\n                </button>\n            </div>\n            <div class=\"signpost-content-body\">\n                <ng-content></ng-content>\n            </div>\n        </div>\n    ",
                host: {
                    "[class.signpost-content]": "true"
                }
            },] },
];
/** @nocollapse */
SignpostContent.ctorParameters = function () { return [
    { type: IfOpenService, },
    { type: ElementRef, },
]; };
SignpostContent.propDecorators = {
    'onClick': [{ type: HostListener, args: ["document:click", ["$event.target"],] },],
};
//# sourceMappingURL=signpost-content.js.map