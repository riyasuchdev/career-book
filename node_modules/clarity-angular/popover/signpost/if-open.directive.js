/*
 * Copyright (c) 2016-2017 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Directive, TemplateRef, ViewContainerRef, Input, Output, EventEmitter } from "@angular/core";
import { IfOpenService } from "./if-open.service";
/**********
 *
 * @class IfOpenDirective
 *
 * @description
 * A structural directive that controls whether or not the associated TemplateRef is instantiated or not.
 * It makes use of a Component instance level service: IfOpenService to maintain state between itself and the component
 * using it in the component template.
 *
 */
var IfOpenDirective = (function () {
    function IfOpenDirective(ifOpenService, template, container) {
        this.ifOpenService = ifOpenService;
        this.template = template;
        this.container = container;
        /**********
         * @property openChange
         *
         * @description
         * An event emitter that emits when the open property is set to allow for 2way binding when the directive is
         * used with de-structured / de-sugared syntax.
         *
         * @type {EventEmitter<boolean>}
         */
        this.openChange = new EventEmitter(false);
    }
    Object.defineProperty(IfOpenDirective.prototype, "open", {
        /********
         * @function open
         *
         * @description
         * A getter that returns the current IfOpenService.open value.
         * @returns {boolean}
         */
        get: function () {
            return this.ifOpenService.open;
        },
        /*********
         * @function open
         *
         * @description
         * A setter that updates IfOpenService.open with value.
         *
         * @param value
         */
        set: function (value) {
            this.ifOpenService.open = value;
        },
        enumerable: true,
        configurable: true
    });
    /*********
     * @function updateView
     *
     * @description
     * Function that takes a boolean value and either created an embedded view for the associated ViewContainerRef or,
     * Clears all views from the ViewContainerRef
     * @param value
     */
    IfOpenDirective.prototype.updateView = function (value) {
        if (value) {
            this.container.createEmbeddedView(this.template);
        }
        else {
            this.container.clear();
        }
    };
    /**********
     * @function ngOnInit
     *
     * @description
     * Angular lifecycle function that subscribes to the Observable changes to the open propoerty of the
     * IfOpenService. When changes are heard it calls updateView with the change value.
     */
    IfOpenDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.ifOpenService.openedChange.subscribe(function (change) {
            _this.updateView(change);
            _this.openChange.emit(change);
        });
    };
    return IfOpenDirective;
}());
export { IfOpenDirective };
IfOpenDirective.decorators = [
    { type: Directive, args: [{
                selector: "[clrIfOpen]"
            },] },
];
/** @nocollapse */
IfOpenDirective.ctorParameters = function () { return [
    { type: IfOpenService, },
    { type: TemplateRef, },
    { type: ViewContainerRef, },
]; };
IfOpenDirective.propDecorators = {
    'open': [{ type: Input, args: ["clrIfOpen",] },],
    'openChange': [{ type: Output, args: ["clrIfOpenChange",] },],
};
//# sourceMappingURL=if-open.directive.js.map