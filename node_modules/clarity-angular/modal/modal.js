/*
 * Copyright (c) 2016-2017 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, Input, Output, EventEmitter, HostListener } from "@angular/core";
import { animate, state, style, transition, trigger } from "@angular/animations";
import { ScrollingService } from "../utils/scrolling/scrolling-service";
import { GHOST_PAGE_ANIMATION } from "./utils/ghost-page-animations";
var Modal = (function () {
    function Modal(_scrollingService) {
        this._scrollingService = _scrollingService;
        this._open = false;
        this._openChanged = new EventEmitter(false);
        this.closable = true;
        this.staticBackdrop = false;
        this.skipAnimation = "false";
        // presently this is only used by wizards
        this.ghostPageState = "hidden";
        this.bypassScrollService = false;
        this.stopClose = false;
        this.altClose = new EventEmitter(false);
    }
    Object.defineProperty(Modal.prototype, "sizeClass", {
        get: function () {
            if (this.size) {
                return "modal-" + this.size;
            }
            else {
                return "";
            }
        },
        enumerable: true,
        configurable: true
    });
    //Detect when _open is set to true and set no-scrolling to true
    Modal.prototype.ngOnChanges = function (changes) {
        if (!this.bypassScrollService && changes && changes.hasOwnProperty("_open")) {
            if (changes["_open"].currentValue) {
                this._scrollingService.stopScrolling();
            }
            else {
                this._scrollingService.resumeScrolling();
            }
        }
    };
    Modal.prototype.ngOnDestroy = function () {
        this._scrollingService.resumeScrolling();
    };
    Modal.prototype.open = function () {
        if (this._open === true) {
            return;
        }
        this._open = true;
        this._openChanged.emit(true);
    };
    Modal.prototype.close = function () {
        if (this.stopClose) {
            this.altClose.emit(false);
            return;
        }
        if (!this.closable || this._open === false) {
            return;
        }
        this._open = false;
        // todo: remove this after animation bug is fixed https://github.com/angular/angular/issues/15798
        // this was handled by the fadeDone event below, but that AnimationEvent is not firing in Angular 4.0.
        this._openChanged.emit(false);
        // SPECME
    };
    Modal.prototype.fadeDone = function (e) {
        if (e.toState === "void") {
            this._openChanged.emit(false);
        }
    };
    return Modal;
}());
export { Modal };
Modal.decorators = [
    { type: Component, args: [{
                selector: "clr-modal",
                viewProviders: [ScrollingService],
                template: "\n\n      <!--\n        ~ Copyright (c) 2016-2017 VMware, Inc. All Rights Reserved.\n        ~ This software is released under MIT license.\n        ~ The full license information can be found in LICENSE in the root directory of this project.\n        -->\n\n      <div class=\"modal\" *ngIf=\"_open\">\n          <!--fixme: revisit when ngClass works with exit animation-->\n          <div [@fadeDown]=\"skipAnimation\" (@fadeDown.done)=\"fadeDone($event)\"\n               class=\"modal-dialog\"\n               [class.modal-sm]=\"size == 'sm'\"\n               [class.modal-lg]=\"size == 'lg'\"\n               [class.modal-xl]=\"size == 'xl'\"\n               role=\"dialog\" aria-hidden=\"true\">\n\n              <div class=\"modal-outer-wrapper\">\n                  <div class=\"modal-content-wrapper\">\n                      <!-- only used in wizards -->\n                      <ng-content select=\".modal-nav\"></ng-content>\n\n                      <div class=\"modal-content\">\n                          <div class=\"modal-header\">\n                              <button type=\"button\" class=\"close\" aria-label=\"Close\"\n                                      *ngIf=\"closable\" (click)=\"close()\">\n                                  <clr-icon aria-hidden=\"true\" shape=\"close\"></clr-icon>\n                              </button>\n                              <ng-content select=\".modal-title\"></ng-content>\n                          </div>\n                          <ng-content select=\".modal-body\"></ng-content>\n                          <ng-content select=\".modal-footer\"></ng-content>\n                      </div>\n                  </div>\n                  <div class=\"modal-ghost-wrapper\">\n                      <div [@ghostPageOneState]=\"ghostPageState\" class=\"modal-ghost modal-ghost-1\"></div>\n                      <div [@ghostPageTwoState]=\"ghostPageState\" class=\"modal-ghost modal-ghost-2\"></div>\n                  </div>\n              </div>\n          </div>\n\n          <div [@fade] class=\"modal-backdrop\"\n               aria-hidden=\"true\"\n               (click)=\"staticBackdrop || close()\"></div>\n      </div>\n    ",
                styles: ["\n        :host { display: inline-block; }\n    "],
                animations: [
                    trigger("fadeDown", [
                        transition("* => false", [
                            style({
                                opacity: 0,
                                transform: "translate(0, -25%)"
                            }),
                            animate("0.2s ease-in-out")
                        ]),
                        transition("false => *", [
                            animate("0.2s ease-in-out", style({
                                opacity: 0,
                                transform: "translate(0, -25%)"
                            }))
                        ])
                    ]),
                    trigger("fade", [
                        transition("void => *", [
                            style({
                                opacity: 0
                            }),
                            animate("0.2s ease-in-out", style({
                                opacity: 0.85
                            }))
                        ]),
                        transition("* => void", [
                            animate("0.2s ease-in-out", style({
                                opacity: 0
                            }))
                        ])
                    ]),
                    trigger("ghostPageOneState", [
                        state(GHOST_PAGE_ANIMATION.STATES.NO_PAGES, style({
                            left: "-24px"
                        })),
                        state(GHOST_PAGE_ANIMATION.STATES.ALL_PAGES, style({
                            left: "0"
                        })),
                        state(GHOST_PAGE_ANIMATION.STATES.NEXT_TO_LAST_PAGE, style({
                            left: "-24px"
                        })),
                        state(GHOST_PAGE_ANIMATION.STATES.LAST_PAGE, style({
                            left: "-24px"
                        })),
                        transition(GHOST_PAGE_ANIMATION.STATES.NO_PAGES + " => *", animate(GHOST_PAGE_ANIMATION.TRANSITIONS.IN)),
                        transition(GHOST_PAGE_ANIMATION.STATES.ALL_PAGES + " => *", animate(GHOST_PAGE_ANIMATION.TRANSITIONS.OUT)),
                        transition(GHOST_PAGE_ANIMATION.STATES.LAST_PAGE + " => *", animate(GHOST_PAGE_ANIMATION.TRANSITIONS.IN)),
                        transition(GHOST_PAGE_ANIMATION.STATES.NEXT_TO_LAST_PAGE + " => *", animate(GHOST_PAGE_ANIMATION.TRANSITIONS.OUT))
                    ]),
                    // TODO: USE TRANSFORM, NOT LEFT...
                    trigger("ghostPageTwoState", [
                        state(GHOST_PAGE_ANIMATION.STATES.NO_PAGES, style({
                            left: "-24px",
                            top: "24px",
                            bottom: "24px"
                        })),
                        state(GHOST_PAGE_ANIMATION.STATES.ALL_PAGES, style({
                            left: "24px"
                        })),
                        state(GHOST_PAGE_ANIMATION.STATES.NEXT_TO_LAST_PAGE, style({
                            left: "0px",
                            top: "24px",
                            bottom: "24px",
                            background: "#bbb"
                        })),
                        state(GHOST_PAGE_ANIMATION.STATES.LAST_PAGE, style({
                            left: "-24px",
                            top: "24px",
                            bottom: "24px"
                        })),
                        transition(GHOST_PAGE_ANIMATION.STATES.NO_PAGES + " => *", animate(GHOST_PAGE_ANIMATION.TRANSITIONS.IN)),
                        transition(GHOST_PAGE_ANIMATION.STATES.ALL_PAGES + " => *", animate(GHOST_PAGE_ANIMATION.TRANSITIONS.OUT)),
                        transition(GHOST_PAGE_ANIMATION.STATES.LAST_PAGE + " => *", animate(GHOST_PAGE_ANIMATION.TRANSITIONS.IN)),
                        transition(GHOST_PAGE_ANIMATION.STATES.NEXT_TO_LAST_PAGE + " => *", animate(GHOST_PAGE_ANIMATION.TRANSITIONS.OUT))
                    ])
                ]
            },] },
];
/** @nocollapse */
Modal.ctorParameters = function () { return [
    { type: ScrollingService, },
]; };
Modal.propDecorators = {
    '_open': [{ type: Input, args: ["clrModalOpen",] },],
    '_openChanged': [{ type: Output, args: ["clrModalOpenChange",] },],
    'closable': [{ type: Input, args: ["clrModalClosable",] },],
    'size': [{ type: Input, args: ["clrModalSize",] },],
    'staticBackdrop': [{ type: Input, args: ["clrModalStaticBackdrop",] },],
    'skipAnimation': [{ type: Input, args: ["clrModalSkipAnimation",] },],
    'ghostPageState': [{ type: Input, args: ["clrModalGhostPageState",] },],
    'bypassScrollService': [{ type: Input, args: ["clrModalOverrideScrollService",] },],
    'stopClose': [{ type: Input, args: ["clrModalPreventClose",] },],
    'altClose': [{ type: Output, args: ["clrModalAlternateClose",] },],
    'close': [{ type: HostListener, args: ["body:keyup.escape",] },],
};
//# sourceMappingURL=modal.js.map