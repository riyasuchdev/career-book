/*
 * Copyright (c) 2016 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { ContentChildren, Component, EventEmitter, forwardRef, Output, Input } from "@angular/core";
import { TabLink } from "./tab-link";
import { TabContent } from "./tab-content";
var nbTabsComponents = 0;
var Tabs = (function () {
    function Tabs() {
        this._currentTabIndex = -1;
        this.currentTabIndexChanged = new EventEmitter(false);
        this.currentTabLinkChanged = new EventEmitter(false);
        this.currentTabContentChanged = new EventEmitter(false);
        this.id = "clr-tabs-" + (nbTabsComponents++);
    }
    Tabs.prototype.setUpLinksAndContents = function () {
        var _this = this;
        // first, iterate over tab links and contents and assign id's if it doesn't exist
        // also set the active tab index; future active tab index will override the earlier one if there are multiple
        this.tabLinks.forEach(function (tabLink, index) {
            if (!tabLink.id) {
                tabLink.id = _this.id + "-tab-" + index;
            }
            if (tabLink.active) {
                _this.currentTabLink = tabLink;
                _this.currentTabIndex = index;
            }
        });
        this.tabContents.forEach(function (tabContent, index) {
            if (!tabContent.id) {
                tabContent.id = _this.id + "-content-" + index;
            }
            if (tabContent.active) {
                _this.currentTabContent = tabContent;
            }
        });
        // second, iterate over tab links and contents to set the aria attributes
        this.tabLinks.forEach(function (tabLink, index) {
            if (index < _this.tabContents.length) {
                tabLink.ariaControls = _this.tabContents[index].id;
            }
        });
        this.tabContents.forEach(function (tabContent, index) {
            if (index < _this.tabLinks.length) {
                tabContent.ariaLabelledBy = _this.tabLinks[index].id;
            }
        });
        // third, set first one as active if there's no active tab link or tab content
        if (!this.currentTabLink && this.tabLinks.length > 0) {
            this.selectTab(this.tabLinks[0]);
        }
    };
    Tabs.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.setUpLinksAndContents();
        this.tabLinkChildren.changes.subscribe(function (children) {
            _this.setUpLinksAndContents();
        });
        this.tabContentChildren.changes.subscribe(function (children) {
            _this.setUpLinksAndContents();
        });
    };
    Tabs.prototype.overrideTabContentChildren = function (tabContentChildren) {
        this.tabContentChildren = tabContentChildren;
        this.setUpLinksAndContents();
    };
    Tabs.prototype.overrideTabLinkChildren = function (tabLinks) {
        this.tabLinkChildren = tabLinks;
        this.setUpLinksAndContents();
    };
    Object.defineProperty(Tabs.prototype, "tabLinks", {
        get: function () {
            return this.tabLinkChildren.toArray();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tabs.prototype, "tabContents", {
        get: function () {
            return this.tabContentChildren.toArray();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tabs.prototype, "currentTabContent", {
        get: function () {
            return this._currentTabContent;
        },
        set: function (tabContent) {
            this._currentTabContent = tabContent;
            this.currentTabContentChanged.emit(tabContent);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tabs.prototype, "currentTabIndex", {
        get: function () {
            return this._currentTabIndex;
        },
        set: function (index) {
            this._currentTabIndex = index;
            this.currentTabIndexChanged.emit(index);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tabs.prototype, "currentTabLink", {
        get: function () {
            return this._currentTabLink;
        },
        set: function (tabLink) {
            this._currentTabLink = tabLink;
            this.currentTabLinkChanged.emit(tabLink);
        },
        enumerable: true,
        configurable: true
    });
    Tabs.prototype.selectTab = function (tabLink) {
        // deactivate all tabs and contents
        this.tabLinks.forEach(function (tab) { return tab.active = false; });
        this.tabContents.forEach(function (tabContent) { return tabContent.active = false; });
        // activate the selected Tab
        var index = this.tabLinks.indexOf(tabLink);
        tabLink.active = true;
        this.currentTabLink = tabLink;
        this.currentTabIndex = index;
        // activate the matching content if it exists; if we have a tabLink with no associated content, it'll show blank
        var selectedTabContent = null;
        if (index < this.tabContents.length) {
            selectedTabContent = this.tabContents[index];
            this.currentTabContent = selectedTabContent;
            selectedTabContent.active = true;
        }
    };
    return Tabs;
}());
export { Tabs };
Tabs.decorators = [
    { type: Component, args: [{
                selector: "clr-tabs",
                template: "\n      <!--\n        ~ Copyright (c) 2016 VMware, Inc. All Rights Reserved.\n        ~ This software is released under MIT license.\n        ~ The full license information can be found in LICENSE in the root directory of this project.\n        -->\n\n      <ul class=\"nav\" role=\"tablist\">\n          <ng-content select=\"clr-tab-link\"></ng-content>\n      </ul>\n      <ng-content select=\"clr-tab-content\"></ng-content>\n    "
            },] },
];
/** @nocollapse */
Tabs.ctorParameters = function () { return []; };
Tabs.propDecorators = {
    'tabLinkChildren': [{ type: ContentChildren, args: [forwardRef(function () { return TabLink; }),] },],
    'tabContentChildren': [{ type: ContentChildren, args: [forwardRef(function () { return TabContent; }),] },],
    '_currentTabIndex': [{ type: Input, args: ["clrTabsCurrentTabIndex",] },],
    '_currentTabLink': [{ type: Input, args: ["clrTabsCurrentTabLink",] },],
    '_currentTabContent': [{ type: Input, args: ["clrTabsCurrentTabContent",] },],
    'currentTabIndexChanged': [{ type: Output, args: ["clrTabsCurrentTabIndexChanged",] },],
    'currentTabLinkChanged': [{ type: Output, args: ["clrTabsCurrentTabLinkChanged",] },],
    'currentTabContentChanged': [{ type: Output, args: ["clrTabsCurrentTabContentChanged",] },],
};
//# sourceMappingURL=tabs.js.map